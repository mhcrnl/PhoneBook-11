import unittest.mockimport modelfrom data_manager import LocalDataManagerfrom collections import OrderedDictfrom pymongo import *from unittest.mock import MagicMock, patch, PropertyMock, Mockclass TestModel(unittest.TestCase):    BASE_DATA = (        OrderedDict([('_id', 1), ('first_name', 'Ivan'), ('last_name', 'Petrov'), ('phone_number', '4695')]),        OrderedDict([('_id', 2), ('first_name', 'Petr'), ('last_name', 'Ivanovich'), ('phone_number', '0101')]),        OrderedDict([('_id', 4), ('first_name', 'Vadim'), ('last_name', 'Kuznetsov'), ('phone_number', '0101')]))    model = model.Model(LocalDataManager())    model.database_conn = MongoClient(document_class=OrderedDict).test_phonebook.contacts    MongoClient().drop_database('test_phonebook')    model.database_conn.insert(BASE_DATA)    def test_contact_check(self):        run = self.model.contact_check('Arnold', 'Schwarzenegger', '2131')        self.assertIsNone(run)        run = self.model.contact_check('Petr', 'Ivanovich', '0101')        res = 'This contact is already in Phone Book.'        self.assertEqual(run, res)    def test_create(self):        run = self.model.create('Ivan', 'Ivanovich', '4695')        res = 'Contact was successfully created.'        self.assertEqual(run, res)        res = MongoClient(document_class=OrderedDict).test_phonebook.contacts.find({'first_name': 'Ivan',                                                                                    'last_name': 'Ivanovich',                                                                                    'phone_number': '4695'})        self.assertTrue(res.count())    def test_delete(self):        run = self.model.delete(1)        res = 'Contact was successfully deleted.'        self.assertEqual(run, res)        res = MongoClient(document_class=OrderedDict).test_phonebook.contacts.find({'_id': 1})        self.assertFalse(res.count())    def test_read(self):        run = self.model.read('', '', '0101')        res = [OrderedDict([('_id', 2), ('first_name', 'Petr'), ('last_name', 'Ivanovich'), ('phone_number', '0101')]),               OrderedDict([('_id', 4), ('first_name', 'Vadim'), ('last_name', 'Kuznetsov'), ('phone_number', '0101')])]        self.assertEqual(run, res)    def test_read_all(self):        run = self.model.read()        self.assertTrue(len(run) == 3)    def test_select_id(self):        search = [OrderedDict([('_id', 2), ('first_name', 'Bruce'), ('last_name', 'Willis'), ('phone_number', '102')])]        run = self.model.select_id('1', search)        res = 'ID "1" is not in the search result.'        self.assertEqual(run, res)        run = self.model.select_id('2', search)        res = 2        self.assertEqual(run, res)    def test_update(self):        run = self.model.update(2, 'Arnold', 'Schwarzenegger', '101')        res = 'Contact was successfully updated.'        self.assertEqual(run, res)        res = MongoClient(document_class=OrderedDict).test_phonebook.contacts.find({'_id': 2, 'first_name': 'Arnold',                                                                                    'last_name': 'Schwarzenegger',                                                                                    'phone_number': '101'})        self.assertTrue(res.count())